<?php

namespace Leha\CentralBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Leha\CentralBundle\Specifications\Filters\Specification;
use Leha\HistoriqueBundle\Model\HistorySearch;
use Leha\CentralBundle\Entity\AttributEchantillon;

/**
 * EchantillonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EchantillonRepository extends EntityRepository
{
    public function getAll()
    {
        $query = $this->joinAttributs($this->createQueryBuilder('e'))
            ->getQuery();

        return $query->getResult();
    }

    public function getQueryBuilderFiltered($values)
    {
        $queryBuilder = $this->createQueryBuilder('e')->select('e');

        foreach ($values as $property => $value) {
            $queryBuilder->andWhere('e.' . $property . ' = :' . $property)
                ->setParameter(':' . $property, $value);
        }

        $this->joinAttributs($queryBuilder);

        return $queryBuilder;
    }

    /**
     * @param \Doctrine\ORM\QueryBuilder $qb
     * @param string $alias
     * @return mixed
     */
    private function joinAttributs($qb, $alias = 'e')
    {
        $qb->leftJoin($alias . '.echantillonAttributs', 'lea')
            ->leftJoin('lea.attribut', 'la')
            ->addSelect('la, lea');

        return $qb;
    }

	public function search($historySearch)
	{
		/*foreach ($historySearch->getRelatedAttributes() as $attributRequete) {
            if (empty($attributRequete)) {
                echo 'empty<br />';
            } else {
                echo 'ok<br />';
            }
		}*/
		
        /*$attributEchantillon = new AttributEchantillon();
        $attributEchantillon->setAttribut($attributsRequete[0]->getAttribut());
        $attributEchantillon->setValue('41395');

        $specification =  new AsArray(new AndX(
            new FilterAttributEchantillon($attributEchantillon)
        ));

        return $repo_echantillon->match($specification);*/
        return null;
	}

    public function match(Specification $specification)
    {
        $qb = $this->createQueryBuilder('e');
        $qb = $this->joinAttributs($qb);

        $expr = $specification->match($qb, 'e');

        $query = $qb->where($expr)->getQuery();

        return $query->getResult();
    }
}
