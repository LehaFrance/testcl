<?php

namespace Leha\CentralBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Leha\CentralBundle\Entity\Attribut;
use Leha\CentralBundle\Specifications\Filters\Specification;
use Leha\CentralBundle\Entity\AttributEchantillon;
use Leha\HistoriqueBundle\Model\HistorySearch;
use Leha\CentralBundle\Specifications\Filters\AsArray;
use Leha\CentralBundle\Specifications\Filters\FilterEchantillon;
use Leha\CentralBundle\Specifications\Filters\FilterAttributEchantillon;
use Leha\CentralBundle\Specifications\Filters\AndX;

/**
 * EchantillonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EchantillonRepository extends EntityRepository
{
    public function getAll()
    {
        $query = $this->joinAttributs($this->createQueryBuilder('e'))
            ->getQuery();

        return $query->getResult();
    }

    public function getQueryBuilderFiltered($values)
    {
        $queryBuilder = $this->createQueryBuilder('e')->select('e');

        foreach ($values as $property => $value) {
            $queryBuilder->andWhere('e.' . $property . ' = :' . $property)
                ->setParameter(':' . $property, $value);
        }

        $this->joinAttributs($queryBuilder);

        return $queryBuilder;
    }

    /**
     * @param \Doctrine\ORM\QueryBuilder $qb
     * @param string $alias
     * @return mixed
     */
    private function joinAttributs($qb, $alias = 'e')
    {
        $qb->leftJoin($alias . '.echantillonAttributs', 'lea')
            ->leftJoin('lea.attribut', 'la')
            ->addSelect('la, lea');

        return $qb;
    }

	public function search($filters)
	{
        $andX = new AndX();

        foreach ($filters as $scope => $filtersScope) {
            switch ($scope) {
                case Attribut::SCOPE_ECHANTILLON :
                    foreach ($filtersScope as $indice => $filter) {
                        $attribut = $filter['attribut'];
                        $andX->addChildren(new FilterEchantillon($attribut->getName(), $filter['value']));
                    }
                    break;
                case Attribut::SCOPE_ATTRIBUT :
                    foreach ($filtersScope as $indice => $filter) {
                        $attributEchantillon = new AttributEchantillon();
                        $attributEchantillon->setAttribut($filter['attribut']);
                        $attributEchantillon->setValue($filter['value']);

                        $andX->addChildren(new FilterAttributEchantillon($attributEchantillon, 'ea' . $indice));
                    }
                    break;
            }
        }

        return $this->match(new AsArray($andX));
	}

    public function match(Specification $specification)
    {
        $qb = $this->createQueryBuilder('e');
        $qb = $this->joinAttributs($qb);

        $expr = $specification->match($qb, 'e');

        $query = $qb->where($expr)->getQuery();

        return $query->getResult();
    }
}
